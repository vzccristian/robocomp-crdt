// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `DSRD4.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DSRD4_h__
#define __DSRD4_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompDSRD4
{

class DSRD4;
class DSRD4Prx;
class DSRD4sync;
class DSRD4syncPrx;
class DSRD4recv;
class DSRD4recvPrx;
class DSRD4send;
class DSRD4sendPrx;

}

namespace RoboCompDSRD4
{

struct Pair
{
    ::std::string key;
    ::std::string value;

    std::tuple<const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(key, value);
    }
};

using Attribs = ::std::vector<::RoboCompDSRD4::Pair>;

struct NeighborsAttribs
{
    ::std::string uid;
    ::RoboCompDSRD4::Attribs neighbors_attribs;

    std::tuple<const ::std::string&, const ::RoboCompDSRD4::Attribs&> ice_tuple() const
    {
        return std::tie(uid, neighbors_attribs);
    }
};

using Neighbors = ::std::vector<::RoboCompDSRD4::NeighborsAttribs>;

struct RoboCompValue
{
    int value;

    std::tuple<const int&> ice_tuple() const
    {
        return std::tie(value);
    }
};

struct CRDTData
{
    ::std::string uid;
    int cc;
    int dc;

    std::tuple<const ::std::string&, const int&, const int&> ice_tuple() const
    {
        return std::tie(uid, cc, dc);
    }
};

struct DS
{
    ::std::string id;
    ::RoboCompDSRD4::RoboCompValue rcvalue;
    ::RoboCompDSRD4::Neighbors neighbors;
    ::RoboCompDSRD4::CRDTData crdt_data;

    std::tuple<const ::std::string&, const ::RoboCompDSRD4::RoboCompValue&, const ::RoboCompDSRD4::Neighbors&, const ::RoboCompDSRD4::CRDTData&> ice_tuple() const
    {
        return std::tie(id, rcvalue, neighbors, crdt_data);
    }
};

using Delta = ::std::vector<::RoboCompDSRD4::DS>;

using DSContext = ::std::vector<::RoboCompDSRD4::CRDTData>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompDSRD4
{

class DSRD4 : public virtual ::Ice::Object
{
public:

    using ProxyType = DSRD4Prx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void sendData(::RoboCompDSRD4::Delta, const ::Ice::Current&) = 0;
    bool _iceD_sendData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendPortDSRD4(::std::string, const ::Ice::Current&) = 0;
    bool _iceD_sendPortDSRD4(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class DSRD4sync : public virtual ::Ice::Object
{
public:

    using ProxyType = DSRD4syncPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual bool sendSync(::std::string, ::RoboCompDSRD4::Delta, const ::Ice::Current&) = 0;
    bool _iceD_sendSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class DSRD4recv : public virtual ::Ice::Object
{
public:

    using ProxyType = DSRD4recvPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void finish(::std::string, const ::Ice::Current&) = 0;
    bool _iceD_finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

class DSRD4send : public virtual ::Ice::Object
{
public:

    using ProxyType = DSRD4sendPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    struct GetDataResult
    {
        ::RoboCompDSRD4::Delta d;
        ::RoboCompDSRD4::DSContext dscontext;
    };

    virtual void getData(::RoboCompDSRD4::Delta&, ::RoboCompDSRD4::DSContext&, const ::Ice::Current&) = 0;
    bool _iceD_getData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompDSRD4
{

class DSRD4Prx : public virtual ::Ice::Proxy<DSRD4Prx, ::Ice::ObjectPrx>
{
public:

    void sendData(const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDSRD4::DSRD4Prx::_iceI_sendData, iceP_d, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendDataAsync(const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDSRD4::DSRD4Prx::_iceI_sendData, iceP_d, context);
    }

    ::std::function<void()>
    sendDataAsync(const ::RoboCompDSRD4::Delta& iceP_d,
                  ::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDSRD4::DSRD4Prx::_iceI_sendData, iceP_d, context);
    }

    void _iceI_sendData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompDSRD4::Delta&, const ::Ice::Context&);

    void sendPortDSRD4(const ::std::string& iceP_port, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDSRD4::DSRD4Prx::_iceI_sendPortDSRD4, iceP_port, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendPortDSRD4Async(const ::std::string& iceP_port, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDSRD4::DSRD4Prx::_iceI_sendPortDSRD4, iceP_port, context);
    }

    ::std::function<void()>
    sendPortDSRD4Async(const ::std::string& iceP_port,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDSRD4::DSRD4Prx::_iceI_sendPortDSRD4, iceP_port, context);
    }

    void _iceI_sendPortDSRD4(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    DSRD4Prx() = default;
    friend ::std::shared_ptr<DSRD4Prx> IceInternal::createProxy<DSRD4Prx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class DSRD4syncPrx : public virtual ::Ice::Proxy<DSRD4syncPrx, ::Ice::ObjectPrx>
{
public:

    bool sendSync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RoboCompDSRD4::DSRD4syncPrx::_iceI_sendSync, iceP_name, iceP_d, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendSyncAsync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RoboCompDSRD4::DSRD4syncPrx::_iceI_sendSync, iceP_name, iceP_d, context);
    }

    ::std::function<void()>
    sendSyncAsync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d,
                  ::std::function<void(bool)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompDSRD4::DSRD4syncPrx::_iceI_sendSync, iceP_name, iceP_d, context);
    }

    void _iceI_sendSync(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::std::string&, const ::RoboCompDSRD4::Delta&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    DSRD4syncPrx() = default;
    friend ::std::shared_ptr<DSRD4syncPrx> IceInternal::createProxy<DSRD4syncPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class DSRD4recvPrx : public virtual ::Ice::Proxy<DSRD4recvPrx, ::Ice::ObjectPrx>
{
public:

    void finish(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDSRD4::DSRD4recvPrx::_iceI_finish, iceP_name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto finishAsync(const ::std::string& iceP_name, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDSRD4::DSRD4recvPrx::_iceI_finish, iceP_name, context);
    }

    ::std::function<void()>
    finishAsync(const ::std::string& iceP_name,
                ::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDSRD4::DSRD4recvPrx::_iceI_finish, iceP_name, context);
    }

    void _iceI_finish(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    DSRD4recvPrx() = default;
    friend ::std::shared_ptr<DSRD4recvPrx> IceInternal::createProxy<DSRD4recvPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

class DSRD4sendPrx : public virtual ::Ice::Proxy<DSRD4sendPrx, ::Ice::ObjectPrx>
{
public:

    void getData(::RoboCompDSRD4::Delta& iceP_d, ::RoboCompDSRD4::DSContext& iceP_dscontext, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompDSRD4::DSRD4send::GetDataResult>(true, this, &RoboCompDSRD4::DSRD4sendPrx::_iceI_getData, context).get();
        iceP_d = ::std::move(result.d);
        iceP_dscontext = ::std::move(result.dscontext);
    }

    template<template<typename> class P = ::std::promise>
    auto getDataAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompDSRD4::DSRD4send::GetDataResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompDSRD4::DSRD4send::GetDataResult, P>(false, this, &RoboCompDSRD4::DSRD4sendPrx::_iceI_getData, context);
    }

    ::std::function<void()>
    getDataAsync(::std::function<void(::RoboCompDSRD4::Delta, ::RoboCompDSRD4::DSContext)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompDSRD4::DSRD4send::GetDataResult&& result)
        {
            response(::std::move(result.d), ::std::move(result.dscontext));
        };
        return _makeLamdaOutgoing<::RoboCompDSRD4::DSRD4send::GetDataResult>(responseCb, ex, sent, this, &RoboCompDSRD4::DSRD4sendPrx::_iceI_getData, context);
    }

    void _iceI_getData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompDSRD4::DSRD4send::GetDataResult>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    DSRD4sendPrx() = default;
    friend ::std::shared_ptr<DSRD4sendPrx> IceInternal::createProxy<DSRD4sendPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::RoboCompDSRD4::Pair>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompDSRD4::Pair, S>
{
    static void read(S* istr, ::RoboCompDSRD4::Pair& v)
    {
        istr->readAll(v.key, v.value);
    }
};

template<>
struct StreamableTraits<::RoboCompDSRD4::NeighborsAttribs>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompDSRD4::NeighborsAttribs, S>
{
    static void read(S* istr, ::RoboCompDSRD4::NeighborsAttribs& v)
    {
        istr->readAll(v.uid, v.neighbors_attribs);
    }
};

template<>
struct StreamableTraits<::RoboCompDSRD4::RoboCompValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompDSRD4::RoboCompValue, S>
{
    static void read(S* istr, ::RoboCompDSRD4::RoboCompValue& v)
    {
        istr->readAll(v.value);
    }
};

template<>
struct StreamableTraits<::RoboCompDSRD4::CRDTData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompDSRD4::CRDTData, S>
{
    static void read(S* istr, ::RoboCompDSRD4::CRDTData& v)
    {
        istr->readAll(v.uid, v.cc, v.dc);
    }
};

template<>
struct StreamableTraits<::RoboCompDSRD4::DS>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompDSRD4::DS, S>
{
    static void read(S* istr, ::RoboCompDSRD4::DS& v)
    {
        istr->readAll(v.id, v.rcvalue, v.neighbors, v.crdt_data);
    }
};

}

namespace RoboCompDSRD4
{

using DSRD4Ptr = ::std::shared_ptr<DSRD4>;
using DSRD4PrxPtr = ::std::shared_ptr<DSRD4Prx>;

using DSRD4syncPtr = ::std::shared_ptr<DSRD4sync>;
using DSRD4syncPrxPtr = ::std::shared_ptr<DSRD4syncPrx>;

using DSRD4recvPtr = ::std::shared_ptr<DSRD4recv>;
using DSRD4recvPrxPtr = ::std::shared_ptr<DSRD4recvPrx>;

using DSRD4sendPtr = ::std::shared_ptr<DSRD4send>;
using DSRD4sendPrxPtr = ::std::shared_ptr<DSRD4sendPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompDSRD4
{

class DSRD4;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompDSRD4::DSRD4*);

class DSRD4sync;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4sync>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompDSRD4::DSRD4sync*);

class DSRD4recv;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4recv>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompDSRD4::DSRD4recv*);

class DSRD4send;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4send>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompDSRD4::DSRD4send*);

}

}

namespace RoboCompDSRD4
{

class DSRD4;
::Ice::Object* upCast(::RoboCompDSRD4::DSRD4*);
typedef ::IceInternal::Handle< ::RoboCompDSRD4::DSRD4> DSRD4Ptr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4> DSRD4Prx;
typedef DSRD4Prx DSRD4PrxPtr;
void _icePatchObjectPtr(DSRD4Ptr&, const ::Ice::ObjectPtr&);

class DSRD4sync;
::Ice::Object* upCast(::RoboCompDSRD4::DSRD4sync*);
typedef ::IceInternal::Handle< ::RoboCompDSRD4::DSRD4sync> DSRD4syncPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4sync> DSRD4syncPrx;
typedef DSRD4syncPrx DSRD4syncPrxPtr;
void _icePatchObjectPtr(DSRD4syncPtr&, const ::Ice::ObjectPtr&);

class DSRD4recv;
::Ice::Object* upCast(::RoboCompDSRD4::DSRD4recv*);
typedef ::IceInternal::Handle< ::RoboCompDSRD4::DSRD4recv> DSRD4recvPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4recv> DSRD4recvPrx;
typedef DSRD4recvPrx DSRD4recvPrxPtr;
void _icePatchObjectPtr(DSRD4recvPtr&, const ::Ice::ObjectPtr&);

class DSRD4send;
::Ice::Object* upCast(::RoboCompDSRD4::DSRD4send*);
typedef ::IceInternal::Handle< ::RoboCompDSRD4::DSRD4send> DSRD4sendPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4send> DSRD4sendPrx;
typedef DSRD4sendPrx DSRD4sendPrxPtr;
void _icePatchObjectPtr(DSRD4sendPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompDSRD4
{

struct Pair
{
    ::std::string key;
    ::std::string value;

    bool operator==(const Pair& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(key != rhs_.key)
        {
            return false;
        }
        if(value != rhs_.value)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Pair& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(key < rhs_.key)
        {
            return true;
        }
        else if(rhs_.key < key)
        {
            return false;
        }
        if(value < rhs_.value)
        {
            return true;
        }
        else if(rhs_.value < value)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Pair& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Pair& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Pair& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Pair& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::RoboCompDSRD4::Pair> Attribs;

struct NeighborsAttribs
{
    ::std::string uid;
    ::RoboCompDSRD4::Attribs neighbors_attribs;
    bool operator==(const NeighborsAttribs& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(uid != rhs_.uid)
        {
            return false;
        }
        if(neighbors_attribs.size() != rhs_.neighbors_attribs.size())
        {
            return false;
        }
        for (int i = 0;i < ((int) neighbors_attribs.size()); ++i) {
            if (neighbors_attribs[i] != rhs_.neighbors_attribs[i]){}
            return false;
        }
        return true;
    }
    friend std::ostream &operator<<( std::ostream &output, const NeighborsAttribs& na) {
        output << na.uid;
        return output;
    };
};

typedef ::std::vector< ::RoboCompDSRD4::NeighborsAttribs> Neighbors;

struct RoboCompValue
{
    ::Ice::Int value;

    bool operator==(const RoboCompValue& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(value != rhs_.value)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RoboCompValue& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(value < rhs_.value)
        {
            return true;
        }
        else if(rhs_.value < value)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RoboCompValue& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const RoboCompValue& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const RoboCompValue& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const RoboCompValue& rhs_) const
    {
        return !operator<(rhs_);
    }
    friend std::ostream &operator<<( std::ostream &output, const RoboCompValue& rv) {
        output << rv.value;
        return output;
    };
};

struct CRDTData
{
    ::std::string uid;
    ::Ice::Int cc;
    ::Ice::Int dc;

    bool operator==(const CRDTData& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(uid != rhs_.uid)
        {
            return false;
        }
        if(cc != rhs_.cc)
        {
            return false;
        }
        if(dc != rhs_.dc)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CRDTData& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(uid < rhs_.uid)
        {
            return true;
        }
        else if(rhs_.uid < uid)
        {
            return false;
        }
        if(cc < rhs_.cc)
        {
            return true;
        }
        else if(rhs_.cc < cc)
        {
            return false;
        }
        if(dc < rhs_.dc)
        {
            return true;
        }
        else if(rhs_.dc < dc)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CRDTData& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const CRDTData& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const CRDTData& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const CRDTData& rhs_) const
    {
        return !operator<(rhs_);
    }
    friend std::ostream &operator<<( std::ostream &output, const CRDTData& crdtdata) {
         output <<" UID:"<<crdtdata.uid<<" CC:"<<crdtdata.cc<<" DC:"<<crdtdata.dc;
//        output <<" UID:"<<crdtdata.uid;
        return output;
    };
};

struct DS
{
    ::std::string id;
    ::RoboCompDSRD4::RoboCompValue rcvalue;
    ::RoboCompDSRD4::Neighbors neighbors;
    ::RoboCompDSRD4::CRDTData crdt_data;
    bool operator==(const DS &ds) const {
        return (ds.id == id && ds.rcvalue == rcvalue && ds.neighbors == neighbors && ds.crdt_data == crdt_data);
    };
    bool operator>(const DS &ds) const {
        return ds.crdt_data.uid < crdt_data.uid;
    }
    bool operator<(const DS &ds) const {
        return ds.crdt_data.uid > crdt_data.uid;
    };

    friend std::ostream &operator<<( std::ostream &output, const DS& ds) {
        output <<"[Owner:"<<ds.id<<", "<<ds.rcvalue <<", "<<ds.crdt_data<<"]";
        return output;
    };
};

typedef ::std::vector< ::RoboCompDSRD4::DS> Delta;

typedef ::std::vector< ::RoboCompDSRD4::CRDTData> DSContext;

}

namespace RoboCompDSRD4
{

class Callback_DSRD4_sendData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSRD4_sendData_Base> Callback_DSRD4_sendDataPtr;

class Callback_DSRD4_sendPortDSRD4_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSRD4_sendPortDSRD4_Base> Callback_DSRD4_sendPortDSRD4Ptr;

class Callback_DSRD4sync_sendSync_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSRD4sync_sendSync_Base> Callback_DSRD4sync_sendSyncPtr;

class Callback_DSRD4recv_finish_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSRD4recv_finish_Base> Callback_DSRD4recv_finishPtr;

class Callback_DSRD4send_getData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DSRD4send_getData_Base> Callback_DSRD4send_getDataPtr;

}

namespace IceProxy
{

namespace RoboCompDSRD4
{

class DSRD4 : public virtual ::Ice::Proxy<DSRD4, ::IceProxy::Ice::Object>
{
public:

    void sendData(const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendData(_iceI_begin_sendData(iceP_d, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendData(iceP_d, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendData(iceP_d, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendData(iceP_d, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompDSRD4::Delta& iceP_d, const ::RoboCompDSRD4::Callback_DSRD4_sendDataPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendData(iceP_d, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendData(const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context, const ::RoboCompDSRD4::Callback_DSRD4_sendDataPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendData(iceP_d, context, del, cookie);
    }

    void end_sendData(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendData(const ::RoboCompDSRD4::Delta&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sendPortDSRD4(const ::std::string& iceP_port, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendPortDSRD4(_iceI_begin_sendPortDSRD4(iceP_port, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendPortDSRD4(const ::std::string& iceP_port, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendPortDSRD4(iceP_port, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendPortDSRD4(const ::std::string& iceP_port, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPortDSRD4(iceP_port, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPortDSRD4(const ::std::string& iceP_port, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPortDSRD4(iceP_port, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPortDSRD4(const ::std::string& iceP_port, const ::RoboCompDSRD4::Callback_DSRD4_sendPortDSRD4Ptr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPortDSRD4(iceP_port, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendPortDSRD4(const ::std::string& iceP_port, const ::Ice::Context& context, const ::RoboCompDSRD4::Callback_DSRD4_sendPortDSRD4Ptr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendPortDSRD4(iceP_port, context, del, cookie);
    }

    void end_sendPortDSRD4(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendPortDSRD4(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class DSRD4sync : public virtual ::Ice::Proxy<DSRD4sync, ::IceProxy::Ice::Object>
{
public:

    bool sendSync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_sendSync(_iceI_begin_sendSync(iceP_name, iceP_d, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendSync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendSync(iceP_name, iceP_d, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendSync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendSync(iceP_name, iceP_d, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendSync(iceP_name, iceP_d, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::RoboCompDSRD4::Callback_DSRD4sync_sendSyncPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendSync(iceP_name, iceP_d, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context, const ::RoboCompDSRD4::Callback_DSRD4sync_sendSyncPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendSync(iceP_name, iceP_d, context, del, cookie);
    }

    bool end_sendSync(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendSync(const ::std::string&, const ::RoboCompDSRD4::Delta&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class DSRD4recv : public virtual ::Ice::Proxy<DSRD4recv, ::IceProxy::Ice::Object>
{
public:

    void finish(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_finish(_iceI_begin_finish(iceP_name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_finish(const ::std::string& iceP_name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_finish(iceP_name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::std::string& iceP_name, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finish(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::std::string& iceP_name, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finish(iceP_name, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::std::string& iceP_name, const ::RoboCompDSRD4::Callback_DSRD4recv_finishPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finish(iceP_name, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_finish(const ::std::string& iceP_name, const ::Ice::Context& context, const ::RoboCompDSRD4::Callback_DSRD4recv_finishPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_finish(iceP_name, context, del, cookie);
    }

    void end_finish(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_finish(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

class DSRD4send : public virtual ::Ice::Proxy<DSRD4send, ::IceProxy::Ice::Object>
{
public:

    void getData(::RoboCompDSRD4::Delta& iceP_d, ::RoboCompDSRD4::DSContext& iceP_dscontext, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getData(iceP_d, iceP_dscontext, _iceI_begin_getData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::RoboCompDSRD4::Callback_DSRD4send_getDataPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context, const ::RoboCompDSRD4::Callback_DSRD4send_getDataPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(context, del, cookie);
    }

    void end_getData(::RoboCompDSRD4::Delta& iceP_d, ::RoboCompDSRD4::DSContext& iceP_dscontext, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompDSRD4
{

class DSRD4 : public virtual ::Ice::Object
{
public:

    typedef DSRD4Prx ProxyType;
    typedef DSRD4Ptr PointerType;

    virtual ~DSRD4();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void sendData(const ::RoboCompDSRD4::Delta&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_sendData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void sendPortDSRD4(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_sendPortDSRD4(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const DSRD4& lhs, const DSRD4& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const DSRD4& lhs, const DSRD4& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class DSRD4sync : public virtual ::Ice::Object
{
public:

    typedef DSRD4syncPrx ProxyType;
    typedef DSRD4syncPtr PointerType;

    virtual ~DSRD4sync();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual bool sendSync(const ::std::string&, const ::RoboCompDSRD4::Delta&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_sendSync(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const DSRD4sync& lhs, const DSRD4sync& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const DSRD4sync& lhs, const DSRD4sync& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class DSRD4recv : public virtual ::Ice::Object
{
public:

    typedef DSRD4recvPrx ProxyType;
    typedef DSRD4recvPtr PointerType;

    virtual ~DSRD4recv();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void finish(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_finish(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const DSRD4recv& lhs, const DSRD4recv& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const DSRD4recv& lhs, const DSRD4recv& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

class DSRD4send : public virtual ::Ice::Object
{
public:

    typedef DSRD4sendPrx ProxyType;
    typedef DSRD4sendPtr PointerType;

    virtual ~DSRD4send();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void getData(::RoboCompDSRD4::Delta&, ::RoboCompDSRD4::DSContext&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const DSRD4send& lhs, const DSRD4send& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const DSRD4send& lhs, const DSRD4send& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompDSRD4::Pair>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompDSRD4::Pair, S>
{
    static void write(S* ostr, const ::RoboCompDSRD4::Pair& v)
    {
        ostr->write(v.key);
        ostr->write(v.value);
    }
};

template<typename S>
struct StreamReader< ::RoboCompDSRD4::Pair, S>
{
    static void read(S* istr, ::RoboCompDSRD4::Pair& v)
    {
        istr->read(v.key);
        istr->read(v.value);
    }
};

template<>
struct StreamableTraits< ::RoboCompDSRD4::NeighborsAttribs>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompDSRD4::NeighborsAttribs, S>
{
    static void write(S* ostr, const ::RoboCompDSRD4::NeighborsAttribs& v)
    {
        ostr->write(v.uid);
        ostr->write(v.neighbors_attribs);
    }
};

template<typename S>
struct StreamReader< ::RoboCompDSRD4::NeighborsAttribs, S>
{
    static void read(S* istr, ::RoboCompDSRD4::NeighborsAttribs& v)
    {
        istr->read(v.uid);
        istr->read(v.neighbors_attribs);
    }
};

template<>
struct StreamableTraits< ::RoboCompDSRD4::RoboCompValue>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompDSRD4::RoboCompValue, S>
{
    static void write(S* ostr, const ::RoboCompDSRD4::RoboCompValue& v)
    {
        ostr->write(v.value);
    }
};

template<typename S>
struct StreamReader< ::RoboCompDSRD4::RoboCompValue, S>
{
    static void read(S* istr, ::RoboCompDSRD4::RoboCompValue& v)
    {
        istr->read(v.value);
    }
};

template<>
struct StreamableTraits< ::RoboCompDSRD4::CRDTData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompDSRD4::CRDTData, S>
{
    static void write(S* ostr, const ::RoboCompDSRD4::CRDTData& v)
    {
        ostr->write(v.uid);
        ostr->write(v.cc);
        ostr->write(v.dc);
    }
};

template<typename S>
struct StreamReader< ::RoboCompDSRD4::CRDTData, S>
{
    static void read(S* istr, ::RoboCompDSRD4::CRDTData& v)
    {
        istr->read(v.uid);
        istr->read(v.cc);
        istr->read(v.dc);
    }
};

template<>
struct StreamableTraits< ::RoboCompDSRD4::DS>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompDSRD4::DS, S>
{
    static void write(S* ostr, const ::RoboCompDSRD4::DS& v)
    {
        ostr->write(v.id);
        ostr->write(v.rcvalue);
        ostr->write(v.neighbors);
        ostr->write(v.crdt_data);
    }
};

template<typename S>
struct StreamReader< ::RoboCompDSRD4::DS, S>
{
    static void read(S* istr, ::RoboCompDSRD4::DS& v)
    {
        istr->read(v.id);
        istr->read(v.rcvalue);
        istr->read(v.neighbors);
        istr->read(v.crdt_data);
    }
};

}

namespace RoboCompDSRD4
{

template<class T>
class CallbackNC_DSRD4_sendData : public Callback_DSRD4_sendData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DSRD4_sendData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DSRD4_sendDataPtr
newCallback_DSRD4_sendData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4_sendData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSRD4_sendDataPtr
newCallback_DSRD4_sendData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4_sendData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DSRD4_sendDataPtr
newCallback_DSRD4_sendData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4_sendData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSRD4_sendDataPtr
newCallback_DSRD4_sendData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4_sendData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSRD4_sendData : public Callback_DSRD4_sendData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DSRD4_sendData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DSRD4_sendDataPtr
newCallback_DSRD4_sendData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4_sendData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4_sendDataPtr
newCallback_DSRD4_sendData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4_sendData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4_sendDataPtr
newCallback_DSRD4_sendData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4_sendData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4_sendDataPtr
newCallback_DSRD4_sendData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4_sendData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DSRD4_sendPortDSRD4 : public Callback_DSRD4_sendPortDSRD4_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DSRD4_sendPortDSRD4(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DSRD4_sendPortDSRD4Ptr
newCallback_DSRD4_sendPortDSRD4(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4_sendPortDSRD4<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSRD4_sendPortDSRD4Ptr
newCallback_DSRD4_sendPortDSRD4(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4_sendPortDSRD4<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DSRD4_sendPortDSRD4Ptr
newCallback_DSRD4_sendPortDSRD4(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4_sendPortDSRD4<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSRD4_sendPortDSRD4Ptr
newCallback_DSRD4_sendPortDSRD4(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4_sendPortDSRD4<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSRD4_sendPortDSRD4 : public Callback_DSRD4_sendPortDSRD4_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DSRD4_sendPortDSRD4(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DSRD4_sendPortDSRD4Ptr
newCallback_DSRD4_sendPortDSRD4(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4_sendPortDSRD4<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4_sendPortDSRD4Ptr
newCallback_DSRD4_sendPortDSRD4(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4_sendPortDSRD4<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4_sendPortDSRD4Ptr
newCallback_DSRD4_sendPortDSRD4(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4_sendPortDSRD4<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4_sendPortDSRD4Ptr
newCallback_DSRD4_sendPortDSRD4(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4_sendPortDSRD4<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DSRD4sync_sendSync : public Callback_DSRD4sync_sendSync_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_DSRD4sync_sendSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDSRD4::DSRD4syncPrx proxy = ::RoboCompDSRD4::DSRD4syncPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_sendSync(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_DSRD4sync_sendSyncPtr
newCallback_DSRD4sync_sendSync(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4sync_sendSync<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSRD4sync_sendSyncPtr
newCallback_DSRD4sync_sendSync(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4sync_sendSync<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSRD4sync_sendSync : public Callback_DSRD4sync_sendSync_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_DSRD4sync_sendSync(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDSRD4::DSRD4syncPrx proxy = ::RoboCompDSRD4::DSRD4syncPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_sendSync(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DSRD4sync_sendSyncPtr
newCallback_DSRD4sync_sendSync(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4sync_sendSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4sync_sendSyncPtr
newCallback_DSRD4sync_sendSync(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4sync_sendSync<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DSRD4recv_finish : public Callback_DSRD4recv_finish_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DSRD4recv_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_DSRD4recv_finishPtr
newCallback_DSRD4recv_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4recv_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSRD4recv_finishPtr
newCallback_DSRD4recv_finish(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4recv_finish<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DSRD4recv_finishPtr
newCallback_DSRD4recv_finish(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4recv_finish<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSRD4recv_finishPtr
newCallback_DSRD4recv_finish(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4recv_finish<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSRD4recv_finish : public Callback_DSRD4recv_finish_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DSRD4recv_finish(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_DSRD4recv_finishPtr
newCallback_DSRD4recv_finish(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4recv_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4recv_finishPtr
newCallback_DSRD4recv_finish(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4recv_finish<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4recv_finishPtr
newCallback_DSRD4recv_finish(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4recv_finish<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4recv_finishPtr
newCallback_DSRD4recv_finish(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4recv_finish<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DSRD4send_getData : public Callback_DSRD4send_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompDSRD4::Delta&, const ::RoboCompDSRD4::DSContext&);

    CallbackNC_DSRD4send_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDSRD4::DSRD4sendPrx proxy = ::RoboCompDSRD4::DSRD4sendPrx::uncheckedCast(result->getProxy());
        ::RoboCompDSRD4::Delta iceP_d;
        ::RoboCompDSRD4::DSContext iceP_dscontext;
        try
        {
            proxy->end_getData(iceP_d, iceP_dscontext, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_d, iceP_dscontext);
        }
    }

private:

    Response _response;
};

template<class T> Callback_DSRD4send_getDataPtr
newCallback_DSRD4send_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompDSRD4::Delta&, const ::RoboCompDSRD4::DSContext&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4send_getData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DSRD4send_getDataPtr
newCallback_DSRD4send_getData(T* instance, void (T::*cb)(const ::RoboCompDSRD4::Delta&, const ::RoboCompDSRD4::DSContext&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DSRD4send_getData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DSRD4send_getData : public Callback_DSRD4send_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompDSRD4::Delta&, const ::RoboCompDSRD4::DSContext&, const CT&);

    Callback_DSRD4send_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDSRD4::DSRD4sendPrx proxy = ::RoboCompDSRD4::DSRD4sendPrx::uncheckedCast(result->getProxy());
        ::RoboCompDSRD4::Delta iceP_d;
        ::RoboCompDSRD4::DSContext iceP_dscontext;
        try
        {
            proxy->end_getData(iceP_d, iceP_dscontext, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_d, iceP_dscontext, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DSRD4send_getDataPtr
newCallback_DSRD4send_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompDSRD4::Delta&, const ::RoboCompDSRD4::DSContext&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4send_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DSRD4send_getDataPtr
newCallback_DSRD4send_getData(T* instance, void (T::*cb)(const ::RoboCompDSRD4::Delta&, const ::RoboCompDSRD4::DSContext&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DSRD4send_getData<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
