// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `DSRD4.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <DSRD4.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompDSRD4_DSRD4_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDSRD4::DSRD4"
};
const ::std::string iceC_RoboCompDSRD4_DSRD4_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendData",
    "sendPortDSRD4"
};
const ::std::string iceC_RoboCompDSRD4_DSRD4_sendData_name = "sendData";
const ::std::string iceC_RoboCompDSRD4_DSRD4_sendPortDSRD4_name = "sendPortDSRD4";

const ::std::string iceC_RoboCompDSRD4_DSRD4sync_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDSRD4::DSRD4sync"
};
const ::std::string iceC_RoboCompDSRD4_DSRD4sync_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendSync"
};
const ::std::string iceC_RoboCompDSRD4_DSRD4sync_sendSync_name = "sendSync";

const ::std::string iceC_RoboCompDSRD4_DSRD4recv_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDSRD4::DSRD4recv"
};
const ::std::string iceC_RoboCompDSRD4_DSRD4recv_ops[] =
{
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_RoboCompDSRD4_DSRD4recv_finish_name = "finish";

const ::std::string iceC_RoboCompDSRD4_DSRD4send_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDSRD4::DSRD4send"
};
const ::std::string iceC_RoboCompDSRD4_DSRD4send_ops[] =
{
    "getData",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_RoboCompDSRD4_DSRD4send_getData_name = "getData";

}

bool
RoboCompDSRD4::DSRD4::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompDSRD4_DSRD4_ids, iceC_RoboCompDSRD4_DSRD4_ids + 2, s);
}

::std::vector<::std::string>
RoboCompDSRD4::DSRD4::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompDSRD4_DSRD4_ids[0], &iceC_RoboCompDSRD4_DSRD4_ids[2]);
}

::std::string
RoboCompDSRD4::DSRD4::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompDSRD4::DSRD4::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompDSRD4::DSRD4";
    return typeId;
}

bool
RoboCompDSRD4::DSRD4::_iceD_sendData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompDSRD4::Delta iceP_d;
    istr->readAll(iceP_d);
    inS.endReadParams();
    this->sendData(::std::move(iceP_d), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompDSRD4::DSRD4::_iceD_sendPortDSRD4(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_port;
    istr->readAll(iceP_port);
    inS.endReadParams();
    this->sendPortDSRD4(::std::move(iceP_port), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompDSRD4::DSRD4::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompDSRD4_DSRD4_ops, iceC_RoboCompDSRD4_DSRD4_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompDSRD4_DSRD4_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_sendData(in, current);
        }
        case 5:
        {
            return _iceD_sendPortDSRD4(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
RoboCompDSRD4::DSRD4sync::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompDSRD4_DSRD4sync_ids, iceC_RoboCompDSRD4_DSRD4sync_ids + 2, s);
}

::std::vector<::std::string>
RoboCompDSRD4::DSRD4sync::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompDSRD4_DSRD4sync_ids[0], &iceC_RoboCompDSRD4_DSRD4sync_ids[2]);
}

::std::string
RoboCompDSRD4::DSRD4sync::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompDSRD4::DSRD4sync::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompDSRD4::DSRD4sync";
    return typeId;
}

bool
RoboCompDSRD4::DSRD4sync::_iceD_sendSync(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::RoboCompDSRD4::Delta iceP_d;
    istr->readAll(iceP_name, iceP_d);
    inS.endReadParams();
    bool ret = this->sendSync(::std::move(iceP_name), ::std::move(iceP_d), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompDSRD4::DSRD4sync::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompDSRD4_DSRD4sync_ops, iceC_RoboCompDSRD4_DSRD4sync_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompDSRD4_DSRD4sync_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_sendSync(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
RoboCompDSRD4::DSRD4recv::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompDSRD4_DSRD4recv_ids, iceC_RoboCompDSRD4_DSRD4recv_ids + 2, s);
}

::std::vector<::std::string>
RoboCompDSRD4::DSRD4recv::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompDSRD4_DSRD4recv_ids[0], &iceC_RoboCompDSRD4_DSRD4recv_ids[2]);
}

::std::string
RoboCompDSRD4::DSRD4recv::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompDSRD4::DSRD4recv::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompDSRD4::DSRD4recv";
    return typeId;
}

bool
RoboCompDSRD4::DSRD4recv::_iceD_finish(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    this->finish(::std::move(iceP_name), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompDSRD4::DSRD4recv::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompDSRD4_DSRD4recv_ops, iceC_RoboCompDSRD4_DSRD4recv_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompDSRD4_DSRD4recv_ops)
    {
        case 0:
        {
            return _iceD_finish(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

bool
RoboCompDSRD4::DSRD4send::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompDSRD4_DSRD4send_ids, iceC_RoboCompDSRD4_DSRD4send_ids + 2, s);
}

::std::vector<::std::string>
RoboCompDSRD4::DSRD4send::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompDSRD4_DSRD4send_ids[0], &iceC_RoboCompDSRD4_DSRD4send_ids[2]);
}

::std::string
RoboCompDSRD4::DSRD4send::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompDSRD4::DSRD4send::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompDSRD4::DSRD4send";
    return typeId;
}

bool
RoboCompDSRD4::DSRD4send::_iceD_getData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompDSRD4::Delta iceP_d;
    this->getData(iceP_d, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_d);
    inS.endWriteParams();
    return true;
}

bool
RoboCompDSRD4::DSRD4send::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompDSRD4_DSRD4send_ops, iceC_RoboCompDSRD4_DSRD4send_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompDSRD4_DSRD4send_ops)
    {
        case 0:
        {
            return _iceD_getData(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompDSRD4::DSRD4Prx::_iceI_sendData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompDSRD4_DSRD4_sendData_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_d);
        },
        nullptr);
}

void
RoboCompDSRD4::DSRD4Prx::_iceI_sendPortDSRD4(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_port, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompDSRD4_DSRD4_sendPortDSRD4_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_port);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
RoboCompDSRD4::DSRD4Prx::_newInstance() const
{
    return ::IceInternal::createProxy<DSRD4Prx>();
}

const ::std::string&
RoboCompDSRD4::DSRD4Prx::ice_staticId()
{
    return RoboCompDSRD4::DSRD4::ice_staticId();
}

void
RoboCompDSRD4::DSRD4syncPrx::_iceI_sendSync(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompDSRD4_DSRD4sync_sendSync_name);
    outAsync->invoke(iceC_RoboCompDSRD4_DSRD4sync_sendSync_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_d);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
RoboCompDSRD4::DSRD4syncPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DSRD4syncPrx>();
}

const ::std::string&
RoboCompDSRD4::DSRD4syncPrx::ice_staticId()
{
    return RoboCompDSRD4::DSRD4sync::ice_staticId();
}

void
RoboCompDSRD4::DSRD4recvPrx::_iceI_finish(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompDSRD4_DSRD4recv_finish_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
RoboCompDSRD4::DSRD4recvPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DSRD4recvPrx>();
}

const ::std::string&
RoboCompDSRD4::DSRD4recvPrx::ice_staticId()
{
    return RoboCompDSRD4::DSRD4recv::ice_staticId();
}

void
RoboCompDSRD4::DSRD4sendPrx::_iceI_getData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompDSRD4::Delta>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompDSRD4_DSRD4send_getData_name);
    outAsync->invoke(iceC_RoboCompDSRD4_DSRD4send_getData_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
RoboCompDSRD4::DSRD4sendPrx::_newInstance() const
{
    return ::IceInternal::createProxy<DSRD4sendPrx>();
}

const ::std::string&
RoboCompDSRD4::DSRD4sendPrx::ice_staticId()
{
    return RoboCompDSRD4::DSRD4send::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompDSRD4_DSRD4_sendData_name = "sendData";

const ::std::string iceC_RoboCompDSRD4_DSRD4_sendPortDSRD4_name = "sendPortDSRD4";

const ::std::string iceC_RoboCompDSRD4_DSRD4sync_sendSync_name = "sendSync";

const ::std::string iceC_RoboCompDSRD4_DSRD4recv_finish_name = "finish";

const ::std::string iceC_RoboCompDSRD4_DSRD4send_getData_name = "getData";

}
::IceProxy::Ice::Object* ::IceProxy::RoboCompDSRD4::upCast(::IceProxy::RoboCompDSRD4::DSRD4* p) { return p; }

void
::IceProxy::RoboCompDSRD4::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompDSRD4::DSRD4;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDSRD4::DSRD4::_iceI_begin_sendData(const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompDSRD4_DSRD4_sendData_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompDSRD4_DSRD4_sendData_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_d);
        result->endWriteParams();
        result->invoke(iceC_RoboCompDSRD4_DSRD4_sendData_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompDSRD4::DSRD4::end_sendData(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompDSRD4_DSRD4_sendData_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDSRD4::DSRD4::_iceI_begin_sendPortDSRD4(const ::std::string& iceP_port, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompDSRD4_DSRD4_sendPortDSRD4_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompDSRD4_DSRD4_sendPortDSRD4_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_port);
        result->endWriteParams();
        result->invoke(iceC_RoboCompDSRD4_DSRD4_sendPortDSRD4_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompDSRD4::DSRD4::end_sendPortDSRD4(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompDSRD4_DSRD4_sendPortDSRD4_name);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompDSRD4::DSRD4::_newInstance() const
{
    return new DSRD4;
}

const ::std::string&
IceProxy::RoboCompDSRD4::DSRD4::ice_staticId()
{
    return ::RoboCompDSRD4::DSRD4::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompDSRD4::upCast(::IceProxy::RoboCompDSRD4::DSRD4sync* p) { return p; }

void
::IceProxy::RoboCompDSRD4::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4sync>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompDSRD4::DSRD4sync;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDSRD4::DSRD4sync::_iceI_begin_sendSync(const ::std::string& iceP_name, const ::RoboCompDSRD4::Delta& iceP_d, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompDSRD4_DSRD4sync_sendSync_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompDSRD4_DSRD4sync_sendSync_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompDSRD4_DSRD4sync_sendSync_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        ostr->write(iceP_d);
        result->endWriteParams();
        result->invoke(iceC_RoboCompDSRD4_DSRD4sync_sendSync_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompDSRD4::DSRD4sync::end_sendSync(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompDSRD4_DSRD4sync_sendSync_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::RoboCompDSRD4::DSRD4sync::_newInstance() const
{
    return new DSRD4sync;
}

const ::std::string&
IceProxy::RoboCompDSRD4::DSRD4sync::ice_staticId()
{
    return ::RoboCompDSRD4::DSRD4sync::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompDSRD4::upCast(::IceProxy::RoboCompDSRD4::DSRD4recv* p) { return p; }

void
::IceProxy::RoboCompDSRD4::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4recv>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompDSRD4::DSRD4recv;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDSRD4::DSRD4recv::_iceI_begin_finish(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompDSRD4_DSRD4recv_finish_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompDSRD4_DSRD4recv_finish_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_RoboCompDSRD4_DSRD4recv_finish_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompDSRD4::DSRD4recv::end_finish(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompDSRD4_DSRD4recv_finish_name);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompDSRD4::DSRD4recv::_newInstance() const
{
    return new DSRD4recv;
}

const ::std::string&
IceProxy::RoboCompDSRD4::DSRD4recv::ice_staticId()
{
    return ::RoboCompDSRD4::DSRD4recv::ice_staticId();
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompDSRD4::upCast(::IceProxy::RoboCompDSRD4::DSRD4send* p) { return p; }

void
::IceProxy::RoboCompDSRD4::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDSRD4::DSRD4send>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompDSRD4::DSRD4send;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompDSRD4::DSRD4send::_iceI_begin_getData(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompDSRD4_DSRD4send_getData_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompDSRD4_DSRD4send_getData_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompDSRD4_DSRD4send_getData_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompDSRD4_DSRD4send_getData_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompDSRD4::DSRD4send::end_getData(::RoboCompDSRD4::Delta& iceP_d, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompDSRD4_DSRD4send_getData_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_d);
    result->_endReadParams();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompDSRD4::DSRD4send::_newInstance() const
{
    return new DSRD4send;
}

const ::std::string&
IceProxy::RoboCompDSRD4::DSRD4send::ice_staticId()
{
    return ::RoboCompDSRD4::DSRD4send::ice_staticId();
}

RoboCompDSRD4::DSRD4::~DSRD4()
{
}

::Ice::Object* RoboCompDSRD4::upCast(::RoboCompDSRD4::DSRD4* p) { return p; }


namespace
{
const ::std::string iceC_RoboCompDSRD4_DSRD4_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDSRD4::DSRD4"
};

}

bool
RoboCompDSRD4::DSRD4::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompDSRD4_DSRD4_ids, iceC_RoboCompDSRD4_DSRD4_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompDSRD4::DSRD4::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompDSRD4_DSRD4_ids[0], &iceC_RoboCompDSRD4_DSRD4_ids[2]);
}

const ::std::string&
RoboCompDSRD4::DSRD4::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompDSRD4::DSRD4::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompDSRD4::DSRD4";
    return typeId;
#else
    return iceC_RoboCompDSRD4_DSRD4_ids[1];
#endif
}

bool
RoboCompDSRD4::DSRD4::_iceD_sendData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompDSRD4::Delta iceP_d;
    istr->read(iceP_d);
    inS.endReadParams();
    this->sendData(iceP_d, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompDSRD4::DSRD4::_iceD_sendPortDSRD4(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_port;
    istr->read(iceP_port);
    inS.endReadParams();
    this->sendPortDSRD4(iceP_port, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_RoboCompDSRD4_DSRD4_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendData",
    "sendPortDSRD4"
};

}

bool
RoboCompDSRD4::DSRD4::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompDSRD4_DSRD4_all, iceC_RoboCompDSRD4_DSRD4_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompDSRD4_DSRD4_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_sendData(in, current);
        }
        case 5:
        {
            return _iceD_sendPortDSRD4(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompDSRD4::DSRD4::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::RoboCompDSRD4::DSRD4, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompDSRD4::DSRD4::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompDSRD4::DSRD4, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
RoboCompDSRD4::_icePatchObjectPtr(DSRD4Ptr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompDSRD4::DSRD4Ptr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompDSRD4::DSRD4::ice_staticId(), v);
    }
}

RoboCompDSRD4::DSRD4sync::~DSRD4sync()
{
}

::Ice::Object* RoboCompDSRD4::upCast(::RoboCompDSRD4::DSRD4sync* p) { return p; }


namespace
{
const ::std::string iceC_RoboCompDSRD4_DSRD4sync_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDSRD4::DSRD4sync"
};

}

bool
RoboCompDSRD4::DSRD4sync::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompDSRD4_DSRD4sync_ids, iceC_RoboCompDSRD4_DSRD4sync_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompDSRD4::DSRD4sync::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompDSRD4_DSRD4sync_ids[0], &iceC_RoboCompDSRD4_DSRD4sync_ids[2]);
}

const ::std::string&
RoboCompDSRD4::DSRD4sync::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompDSRD4::DSRD4sync::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompDSRD4::DSRD4sync";
    return typeId;
#else
    return iceC_RoboCompDSRD4_DSRD4sync_ids[1];
#endif
}

bool
RoboCompDSRD4::DSRD4sync::_iceD_sendSync(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    ::RoboCompDSRD4::Delta iceP_d;
    istr->read(iceP_name);
    istr->read(iceP_d);
    inS.endReadParams();
    bool ret = this->sendSync(iceP_name, iceP_d, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_RoboCompDSRD4_DSRD4sync_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendSync"
};

}

bool
RoboCompDSRD4::DSRD4sync::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompDSRD4_DSRD4sync_all, iceC_RoboCompDSRD4_DSRD4sync_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompDSRD4_DSRD4sync_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_sendSync(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompDSRD4::DSRD4sync::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::RoboCompDSRD4::DSRD4sync, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompDSRD4::DSRD4sync::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompDSRD4::DSRD4sync, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
RoboCompDSRD4::_icePatchObjectPtr(DSRD4syncPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompDSRD4::DSRD4syncPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompDSRD4::DSRD4sync::ice_staticId(), v);
    }
}

RoboCompDSRD4::DSRD4recv::~DSRD4recv()
{
}

::Ice::Object* RoboCompDSRD4::upCast(::RoboCompDSRD4::DSRD4recv* p) { return p; }


namespace
{
const ::std::string iceC_RoboCompDSRD4_DSRD4recv_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDSRD4::DSRD4recv"
};

}

bool
RoboCompDSRD4::DSRD4recv::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompDSRD4_DSRD4recv_ids, iceC_RoboCompDSRD4_DSRD4recv_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompDSRD4::DSRD4recv::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompDSRD4_DSRD4recv_ids[0], &iceC_RoboCompDSRD4_DSRD4recv_ids[2]);
}

const ::std::string&
RoboCompDSRD4::DSRD4recv::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompDSRD4::DSRD4recv::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompDSRD4::DSRD4recv";
    return typeId;
#else
    return iceC_RoboCompDSRD4_DSRD4recv_ids[1];
#endif
}

bool
RoboCompDSRD4::DSRD4recv::_iceD_finish(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    this->finish(iceP_name, current);
    inS.writeEmptyParams();
    return true;
}

namespace
{
const ::std::string iceC_RoboCompDSRD4_DSRD4recv_all[] =
{
    "finish",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

bool
RoboCompDSRD4::DSRD4recv::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompDSRD4_DSRD4recv_all, iceC_RoboCompDSRD4_DSRD4recv_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompDSRD4_DSRD4recv_all)
    {
        case 0:
        {
            return _iceD_finish(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompDSRD4::DSRD4recv::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::RoboCompDSRD4::DSRD4recv, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompDSRD4::DSRD4recv::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompDSRD4::DSRD4recv, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
RoboCompDSRD4::_icePatchObjectPtr(DSRD4recvPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompDSRD4::DSRD4recvPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompDSRD4::DSRD4recv::ice_staticId(), v);
    }
}

RoboCompDSRD4::DSRD4send::~DSRD4send()
{
}

::Ice::Object* RoboCompDSRD4::upCast(::RoboCompDSRD4::DSRD4send* p) { return p; }


namespace
{
const ::std::string iceC_RoboCompDSRD4_DSRD4send_ids[2] =
{
    "::Ice::Object",
    "::RoboCompDSRD4::DSRD4send"
};

}

bool
RoboCompDSRD4::DSRD4send::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompDSRD4_DSRD4send_ids, iceC_RoboCompDSRD4_DSRD4send_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompDSRD4::DSRD4send::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompDSRD4_DSRD4send_ids[0], &iceC_RoboCompDSRD4_DSRD4send_ids[2]);
}

const ::std::string&
RoboCompDSRD4::DSRD4send::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompDSRD4::DSRD4send::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompDSRD4::DSRD4send";
    return typeId;
#else
    return iceC_RoboCompDSRD4_DSRD4send_ids[1];
#endif
}

bool
RoboCompDSRD4::DSRD4send::_iceD_getData(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompDSRD4::Delta iceP_d;
    this->getData(iceP_d, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_d);
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_RoboCompDSRD4_DSRD4send_all[] =
{
    "getData",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

bool
RoboCompDSRD4::DSRD4send::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompDSRD4_DSRD4send_all, iceC_RoboCompDSRD4_DSRD4send_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompDSRD4_DSRD4send_all)
    {
        case 0:
        {
            return _iceD_getData(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompDSRD4::DSRD4send::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::RoboCompDSRD4::DSRD4send, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompDSRD4::DSRD4send::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompDSRD4::DSRD4send, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
RoboCompDSRD4::_icePatchObjectPtr(DSRD4sendPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompDSRD4::DSRD4sendPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompDSRD4::DSRD4send::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
